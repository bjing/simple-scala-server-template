plugins {
    id 'scala'
    id 'com.diffplug.spotless' version '5.12.5'
    id 'com.github.maiflai.scalatest' version '0.31'
    id 'application'
}

application {
    mainClassName = 'com.project.simple.Main'
    applicationDefaultJvmArgs = ['-XX:+PrintCommandLineFlags', '-Xmx6G']
}

ext {
    scalaVersionFull = '2.13.6'
    scalaVersion = '2.13'
    catsVersion = '2.6.1'
    catsEffectVersion = '2.5.4'
//    circeVersion = '0.14.1'
//    pureConfigVersion = '0.16.0'
}

repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    kindProjectorPlugin
    betterMonadicForPlugin
}

dependencies {
    implementation "org.scala-lang:scala-library:${scalaVersionFull}"
    kindProjectorPlugin group: 'org.typelevel', name: "kind-projector_${scalaVersionFull}", version: '0.13.2'
    betterMonadicForPlugin group: 'com.olegpy', name: "better-monadic-for_${scalaVersion}", version: '0.3.1'

//    implementation "com.typesafe:config:1.4.1"
//    implementation "com.github.pureconfig:pureconfig_${scalaVersion}:${pureConfigVersion}"

    implementation "org.typelevel:cats-core_${scalaVersion}:${catsVersion}"
    implementation "org.typelevel:cats-effect_${scalaVersion}:${catsEffectVersion}"

//    implementation "io.circe:circe-core_${scalaVersion}:${circeVersion}"
//    implementation "io.circe:circe-parser_${scalaVersion}:${circeVersion}"
//    implementation "io.circe:circe-generic_${scalaVersion}:${circeVersion}"

//    implementation "com.typesafe.scala-logging:scala-logging_${scalaVersion}:3.9.4"

    testImplementation "org.scalatest:scalatest_${scalaVersion}:3.1.1"
    testRuntimeOnly "com.vladsch.flexmark:flexmark-profile-pegdown:0.36.8"
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = [
        "-Wunused",
        "-Xfatal-warnings",
        "-Xplugin:" + configurations.kindProjectorPlugin.asPath,
        "-Xplugin:" + configurations.betterMonadicForPlugin.asPath,
        "-Ywarn-unused:implicits",           // Warn if an implicit parameter is unused.
        "-Ywarn-unused:imports",             // Warn if an import selector is not referenced.
        "-Ywarn-unused:locals",              // Warn if a local definition is unused.
        "-Ywarn-unused:patvars",             // Warn if a variable bound in a pattern is unused.
        "-Ywarn-unused:privates",            // Warn if a private member is unused
    ]
}

spotless {
    scala {
        scalafmt().configFile("${rootDir}/.scalafmt.conf")
    }

    format 'misc', {
        target project.fileTree(projectDir) {
            include '**/*.gradle', '**/*.md', '**/.gitignore', '**/*.properties', '**/*.conf', '**/*.yaml', '**/*.yml', '**/*.xml'
            exclude 'build/**'
            exclude 'target/**'
            exclude '.gradle/**'
            exclude '.idea/**'
            exclude '.serverless/**'
            exclude 'node_modules/**'
        }

        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
}
